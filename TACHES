À FAIRE : 
----------

- Valider la page à l'aide de TIDY (doit être facultatif)
- Trouver une méthode plus fine pour trouver le nombre de catégories par fichier (autre qu'un grep par exemple)
- Vérifier la présence des /, [ et ] dans les variables avant qu'elles soient mises dans un SED. Ceci à l'aide de ${var//a/b} pour modifier les chaînes A par B dans VAR.
- Que donne une ligne vide dans le fichier de catégorie ? => à tester comme cas possible
- Choisir le nombre de colonne d'élément : 
#corps ul.ensemble_element li {
width: 11em;
margin: auto;
}
Mettre à width = auto. Si on veut 1 colonne, alors on met 11x1 + 1x1, si on veut deux colonne, alors on met 11x2 + 1x2, 3 colonnes font 11x3 + 1x3
- Permettre d'ajouter des fichiers statiques (pour permettre par exemple de donner un lien vers une version d'un logiciel sur la page d'accueil)

>>> Pour la v0.1.3 : 
- aside en NAV !!!
- activer menu avec une variable du genre "MENU_ACTIVE = 1" (par exemple)
- favicon.ico ?
- création du fichier configrc s'il n'existe pas (dans test)
- Transformer la doc en README.asciidoc ?
- Bug: si caractères accentués dans les titres/description. Souci qui semble se régler en mettant HTML au lieu de XHTML pour la page index

>>> Pour la v0.2 : 
- Transformer le fichier GNUmakefile en makefile pour bmake
  - changer les sed -i en "sed -e 's/chaine/autrechaine/g' > file.new && mv file.new file" (avec ou sans -e, c'est selon)
  - changer les VAR= en VAR:=
  - changer l'utilisation du shell par TXTs = $(shell ls $(dossier)/*$(ext)), par exemple.
- Intégrer le script .sh dans le Makefile
- faire une section install dans le makefile permettant d'installer dans DESTDIR

>>> Pour la v0.3 : 
- Transformer variables en anglais
- Documentation en anglais
- faire une page "print.css"
  - mettre en noir et blanc
  - ajouter le nom des liens en fin de chaque lien
- Tenter d'utiliser la description de l'élément pour faire une fenêtre qui s'affiche quand on passe sur le cadre de l'élément (tout en CSS si possible !)
- Ajout d'un lien vers le site dont proviennent les images
- Ajouter une option qui affiche sous chaque cadre la description de l'élément (ou bien une autre façon d'afficher les liens)
- permettre l'ajout d'un pied de page
- afficher un marqueur graphique qui définit si on sort du site actuel ou pas (genre IN/OUT dans la configuration des éléments, ce qui affiche une icône différente)

===============================================================================

===============================================================================

FAITES :
---------

- faire un makefile basique
- faire un .gitignore pour les fichiers/dossiers inutiles
- faire un fichier TACHES
- ajouter une licence/copyright
- faire une page d'exemple avec un menu et une feuille de style en noir et blanc
- faire une page d'exemple sans menu et avec une feuille de style en noir et blanc
- permettre l'ajout facultatif d'un menu
  - gérer le fait que le css change si on a un menu ou pas (Cf. dossier exemple avec le(s) fichier(s) patch)
- migration des fichiers .html dans un dossier prévu à cet effet
- indenter le code de parcours_categ.sh pour n'avoir plus que deux espaces au lieu de 4
- trouver une syntaxe pour les fichiers de catégories contenant des éléments
Par exemple : ### Ma super catégorie ###
- dans dossier categ : un fichier par catégorie et les éléments contenus dans la catégories. Le format est un peu comme celui ci : 
     #commentaire
     [[Titre de la catégorie]]Description de la catégorie (pour mettre dans des <p></p>
     titre_element##URL##Description##adresse_image##titre_image##description_image
- test de l'existence du dossier CATEG dans le script parcours_categ.sh
- BUG : On ne peut pas avoir plusieurs catégories => changer script creation_categ.sh pour ne PAS détruire le fichier categories.html (le makefile doit le faire)
- ajouter des ECHO avant chaque ligne pour définir où ça plante quand c'est 
le cas
- rendre la page valide XHTML Strict via validator.w3.org
- permettre l'ajout d'un texte d'introduction au début de la page
- changer les variables contenues dans les fichiers HTML par @@NOM_VARIABLE@@
- ajout de l'adresse URL du dépôt GIT dans le pied de page (soulier) du portail : Généré par <a href="http://git.dossmann.net/scripts/porteail.git/" title="Se rendre sur le dépôt source du projet PorteAil">PorteAil</a>
- amélioration de la recherche des fichiers dans le dossier catégorie, avec choix d'une extension
- Supprimer l'ensemble des variables @@quelque chose@@ dans le fichier à la fin du traitement (pour nettoyage)
- ajouter une licence comme LPRAB
- ajouter les éléments de chaque catégorie dans la page html
(car plus pratique)
- parcours_categ : normer les variables pour avoir categ_titre et element_titre plutôt que titre_categ et element_titre…
- dans le makefile s'occuper de faire une section pour les catégories contenant
des éléments
- ajouter des fichiers images au bon format et sous licence libre
- compatibilité avec d'autres navigateurs pour le CSS -moz-border-radius et -moz-box-shadow
- Éviter l'utilisation d'un patch pour le CSS avec/sans menu. Proposer deux variables contenant les deux versions du fichier CSS.
- Modifier le fichier introduction.html pour donner quelques infos à l'utilisateur sur comment comprendre/utiliser le programme => parler du fichier LISMOI et du dossier 'categ'
- Enlever le dièse de INTRO
- Dans la doc : faire un paragraphe "CONTACT" afin de me contacter pour bugs éventuels
- compléter le fichier LISMOI pour expliquer le fonctionnement du logiciel
  - les dossiers à avoir
  - les fichiers à avoir
  - les dossiers résultants
  - les variables à changer pour personnaliser
  - ajouter un paragraphe LICENCE pour expliquer la licence appliquée
- des h3 mais pas de h2, WTF ?
- améliorer visibilité sur écran 22" avec : {margin-left:10%;margin-right:10%;}
- créer un site internet parlant de PorteAil avec une page générée par PorteAil comportant l'ensemble des sites utilisant Porteail
- Essayer de faire en sorte que le lien soit écarté jusqu'aux bords de tout l'élément afin que le clic sur l'élément renvoie sur la page
- Faire la feuille de style bleue pour le site avec un menu
- Voir si possibilité de faire un "source configrc" pour inclure les variables modifiables du programme, histoire de n'éditer que le fichier 'configrc' du programme
- améliorer la connexion entre le makefile et creation_categ.sh afin de ne plus toucher aux variables de creation_categ.sh
- trouver une méthode qui permet de récupérer toujours les dernières versions sources sans écraser la version que nous avons. configrc.exemple par exemple, à copier en configrc ;)
- Prévoir un script d'export des données entrées par l'utilisateur s'il utilise un dépôt git OU trouver un système de mise à jour du logiciel => réglé avec le fichier configrc.exemple en configrc
- faire des "which" pour les programmes utilisés (notamment pour sha1 ou md5). Quitter le makefile si dans TEST les "which" sont vides
- ANNULE du fait qu'on peut utiliser le makefile pour vérifier ces modifications (makefile est fait pour ça) | dans dossier categ on fait une somme sha1 ou md5 de tous les fichiers. On copie dans le dossier porteail. Au début du programme, on compare somme de tous les fichiers du dossier categ avec la somme contenue dans dossier porteail (s'il existe). Si les sommes sont pareilles, alors on quitte le makefile
  - http://stackoverflow.com/questions/1657232/how-can-i-calculate-an-md5-checksum-of-a-directory
  - find directory -type f -print0 | xargs -0 md5sum >> file.md5 (ceci est pour vérifier par exemple les *.txt !!!)
  - Tenter un ls categ |md5sum ou bien for i in `ls categ`; do md5sum categ/$i; done > somme.md5
  - Utiliser ça pour vérifier sommes de contrôle : md5 * | diff /path/to/md5.checksum -
  - find categ -type f -name *.txt -exec md5sum {} + | awk '{print $1}' |sort |diff somme.md5 -|wc -l
- compléter l'adresse des images pour l'insertion dans le contenu
- vérifier l'existence de l'image avant de l'ajouter
- si pas d'image ou image inexistante, mettre une image générique
- Doc : donner l'astuce pour ordonner les catégories dans le fichier : mettre 00-nom_fichier.txt, puis 01-autre_categorie.txt, etc.
- imaginer un système d'héritage des feuilles de style pour ne modifier que les couleurs de la page, en dehors de la structure. => fait avec une double inclusion de feuille de style dans la page HTML
- permettre l'ajout de plusieurs CSS dans HEAD
- créer plusieurs feuilles de style (couleurs, positionnement des éléments, etc.)
- ne copier QUE les images utilisées
- faire un export en XHTML si possible (ajouter l'extension au fichier de destination choisi)
- Simplifier le code HTML et CSS
  - enlever les div en trop
  - changer les div#abc en #abc dans le CSS
  - commenter le code CSS
- Fait. Seulement pas de inline-block pour un meilleur affichage | Changer les DIV en une liste d'éléments puis mettre display: inline-block; pour l'affichage. Si liste, alors mettre des point-virgules à la fin de chaque ligne (et les cacher en css)
- Supprimer les descriptions des logos pour un meilleur affichage (Cf. elinks par exemple pour une démonstration verbeuse) : les ajouter dans le CSS. Alt = rien du tout, et title = nom donné.
- Meilleur affichage dans les navigateurs textes (seulement les alt des images à modifier)
- ajouter une extension aux fichiers images copiées
- Simplifier le fichier LISMOI
  - ne donner que quelques lignes simples pour lancer le programme : installer, configurer, lancer !
  - supprimer les chapitres inutiles
- Simplifier le fichier Makefile au niveau des variables pour réduire leur nombre
  - FAIT | Réorganiser les variables du GNUmakefile pour rendre plus simple le choix des variables par l'utilisateur. Afin qu'il n'ai JAMAIS à mettre d'autre variables dans le contenu. Par exemple jamais écrire cela : $(DOSSIER)/fichier.html !!!!
  - FAIT | ne laisser que la variable CSS_COULEUR ? => trouver une solution potable
  - FAIT | ne laisser que les variables fondamentales pour l'utilisateur comme le choix du titre, si intro, si menu
  - FAIT | déplacer les variables inutiles à l'utilisateur dans un autre fichier de config qu'on inclue ? Ou bien les mettre avant le include configrc, comme ça l'utilisateur peut les redéfinir si besoin !
  - FAIT | mettre toutes les variables en majuscules OU en minuscule (peut-être les variables en majuscules pour les principales, et celles du Makefile en minuscule
  - FAIT | renommer les variables correctement !
- Vérifier/optimiser les cibles du makefile
- Vérifier/optimiser les dépendances du makefile
- Vérifier l'existence des dossiers suivants : COMPOSANTS, IMAGE, STYLE, CSS, CIBLE
- ajouter les fichiers générés pour chaque section du makefile (ceci de manière intelligente… si possible !)
- Bug: si une URL possède plusieurs &
- HTML 5 avec header et footer
